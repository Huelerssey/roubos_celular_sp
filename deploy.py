import pandas as pd
import json
import streamlit as st
from streamlit_option_menu import option_menu
from streamlit_lottie import st_lottie


st.set_page_config(
    page_title='Roubos SP',
    page_icon='üëÆ‚Äç‚ôÇÔ∏è',
    layout='wide'
)

with open("style.css") as f:
    st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

opcao_selecionada = option_menu(
    menu_title=None,
    options=['Home', 'Maps', 'Dashboard', 'Storytelling'],
    icons=['house-door', 'geo-alt', 'clipboard-data', 'journals'],
    default_index=0,
    orientation='horizontal',
)

# Renderizar conte√∫do com base na op√ß√£o selecionada
if opcao_selecionada == 'Home':

    # colunas de organiza√ß√£o do site
    col1, col2, col3 = st.columns(3)

    # >>anima√ß√µes<<

    # hello
    with open('hello.json') as source:
        hello=json.load(source)
    with open('programing.json') as source:
        programing=json.load(source)
    
    # boas vindas ao projeto
    with col2:
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.subheader("Boas vindas ao projeto Mancha Criminal de SP")
    with col1:
        st_lottie(hello, height=400, width=800)
    
    # resumo do projeto
    with col2:
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.subheader("Este √© um projeto de an√°lise de dados que utiliza a geolocaliza√ß√£o de celulares registrados em boletins de ocorr√™ncia para determinar a localiza√ß√£o exata do crime, fornecendo insights valiosos para auxiliar na tomada de decis√µes estrat√©gicas.")
    with col3:
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st.write("")
        st_lottie(programing, height=400, width=400)

# P√°gina dos mapas
if opcao_selecionada == 'Maps':

    #organiza√ß√£o da pagina
    col1, col2, col3 = st.columns(3)

    # Op√ß√µes do selectbox
    opcoes_graficos = [
        'Mancha Criminal Cluster - Estado de S√£o Paulo 2022',
        'Mancha Criminal Heat - Estado de S√£o Paulo 2022',
        'Mancha Criminal Cluster - Capital de S√£o Paulo 2022',
        'Mancha Criminal Heat - Capital de S√£o Paulo 2022'    
        
    ]

    with col2:
        # Selectbox para selecionar o gr√°fico a ser exibido
        grafico_selecionado = st.selectbox('Selecione o gr√°fico a ser exibido', opcoes_graficos, label_visibility='hidden')

    # Fun√ß√£o para exibir o gr√°fico selecionado
    def exibir_grafico(caminho_arquivo):
        # Abre o arquivo HTML e l√™ o conte√∫do como uma string
        with open(caminho_arquivo, 'r') as arquivo:
            conteudo_html = arquivo.read()

        # Exibe o gr√°fico no Streamlit usando o Markdown
        st.components.v1.html(conteudo_html, width=1700, height=700, scrolling=True)

    # Mapeia a op√ß√£o selecionada para o caminho do arquivo correspondente
    mapeamento_graficos = {
        'Mancha Criminal Cluster - Estado de S√£o Paulo 2022': r'C:\dev\roubos_celular_sp\mapas_estado\mapa_cluster_estado.html',
        'Mancha Criminal Heat - Estado de S√£o Paulo 2022': r'C:\dev\roubos_celular_sp\mapas_estado\mapa_heatmap_estado.html',
        'Mancha Criminal Cluster - Capital de S√£o Paulo 2022': r'C:\dev\roubos_celular_sp\mapas_capital\mapa_cluster_capital.html',
        'Mancha Criminal Heat - Capital de S√£o Paulo 2022': r'C:\dev\roubos_celular_sp\mapas_capital\mapa_heatmap_capital.html'
        
    }

    # Verifica se a op√ß√£o selecionada √© v√°lida e exibe o gr√°fico correspondente
    if grafico_selecionado in mapeamento_graficos:
        caminho_arquivo = mapeamento_graficos[grafico_selecionado]
        exibir_grafico(caminho_arquivo)
    else:
        st.warning('Selecione uma op√ß√£o v√°lida.')

# Pagina do dashboard power bi
if opcao_selecionada == 'Dashboard':

    # Definir altura e largura do iframe
    height = 800
    width = 1316

    # Centralizar o iframe
    html_code = f"""
    <div style="display: flex; justify-content: center;">
        <iframe src="https://app.powerbi.com/view?r=eyJrIjoiODZhNWEwNmItYWY4My00OTQ5LThmMmEtMDM2YmNiOTcwNTk5IiwidCI6ImE5M2YyOTk3LTRjNGMtNDk2ZS05OTk5LTZkNTEzY2Y1ODFjZiJ9" 
                height={height} width={width}></iframe>
    </div>
    """

    # Exibe o dashboard na p√°gina
    st.markdown(html_code, unsafe_allow_html=True)

# Pagina de storytelling do projeto
if opcao_selecionada == 'Storytelling':
    
    # Organiza as colunas
    coluna1, coluna2, coluna3 = st.columns(3)

    # Coloca o texto no centro da pagina
    with coluna2:

        # Introdu√ß√£o
        st.title('Storytelling do Projeto')

        # Introdu√ß√£o
        st.header("1. Introdu√ß√£o")
        st.write("Bem-vindo ao storytelling do projeto de an√°lise de dados de roubos de celular no estado de S√£o Paulo. Aqui, vou compartilhar todas as etapas de constru√ß√£o do projeto, transmitir descobertas valiosas de maneira simples e buscar por solu√ß√µes efetivas.")
        st.image("imagens/2.png")
        st.write("")

        st.header("2. Obten√ß√£o de dados")
        st.write("Os dados sobre os crimes foram obtidos por meio do site do governo de S√£o Paulo. Utilizei a plataforma de transpar√™ncia da Secretaria de Seguran√ßa P√∫blica de S√£o Paulo, acess√≠vel atrav√©s do [link](http://www.ssp.sp.gov.br/transparenciassp/Consulta.aspx). Essa fonte confi√°vel fornece informa√ß√µes detalhadas sobre os registros de ocorr√™ncias de crimes, incluindo os casos de roubo de celular.")
        st.write("Al√©m disso, para enriquecer a an√°lise e desenvolver a funcionalidade da 'Mancha Criminal', fiz o uso de dados geogr√°ficos de todos os munic√≠pios de S√£o Paulo. Esses dados foram adquiridos no site do Instituto Brasileiro de Geografia e Estat√≠stica (IBGE) por meio do seguinte [link](https://www.ibge.gov.br/geociencias/organizacao-do-territorio/malhas-territoriais/15774-malhas.html?=&t=downloads).")
        st.write("Em ambos os casos, n√£o foi poss√≠vel acessar os dados por meio de uma API, ent√£o realizei o download manual dos arquivos disponibilizados pelas respectivas plataformas.")
        st.write("")

        st.header("3. Data Cleaning & Loading")
        st.write("Ainda que, em uma apresenta√ß√£o formal esse t√≥pico possa n√£o ser relevante, as etapas de limpeza, tratamento e carregamento tem um papel fundamental. Como este √© um projeto de portf√≥lio, vou compartilhar algumas das etapas de ETL, para demonstrar minhas habilidades no assunto. No entanto, se isso n√£o for do seu interesse, sinta-se √† vontade para pular para a pr√≥xima se√ß√£o. Caso queira explorar o c√≥digo completo do projeto, ele est√° dispon√≠vel no meu GitHub: [link](https://github.com/Huelerssey/roubos_celular_sp).")
        st.write("")

        st.subheader("Limpeza e tratamento de dados")
        codigo1 = """
        # Lista para armazenar os DataFrames
        dataframes = []

        # Itera sobre os arquivos na pasta
        for arquivo in os.listdir(caminho_pasta):
            if arquivo.endswith(".xlsx"):
                # L√™ o arquivo Excel e armazena em um DataFrame
                df = pd.read_excel(os.path.join(caminho_pasta, arquivo))
                dataframes.append(df)

        # Concatena os DataFrames em um √∫nico DataFrame
        df_final = pd.concat(dataframes, ignore_index=True)

        # lista de colunas a serem excluidas
        colunas_para_excluir = [
            "NUM_BO",
            "NUMERO_BOLETIM",
            "BO_EMITIDO",
            "PERIDOOCORRENCIA",
            "DATACOMUNICACAO",
            "DATAELABORACAO",
            "BO_AUTORIA",
            "NUMERO_BOLETIM_PRINCIPAL",
            "EXAME",
            "SOLUCAO",
            "DELEGACIA_CIRCUNSCRICAO",
            "ESPECIE",
            "RUBRICA",
            "DESDOBRAMENTO",
            "STATUS",
            "TIPOPESSOA",
            "NATURALIDADE",
            "NACIONALIDADE",
            "DATANASCIMENTO",
            "IDADE",
            "ESTADOCIVIL",
            "PROFISSAO",
            "GRAUINSTRUCAO",
            "CORCUTIS",
            "NATUREZAVINCULADA",
            "TIPOVINCULO",
            "RELACIONAMENTO",
            "PARENTESCO",
            "UF_VEICULO",
            "CIDADE_VEICULO",
            "DESCR_MARCA_VEICULO",
            "ANO_FABRICACAO",
            "ANO_MODELO",
            "QUANT_CELULAR",
            "ANO_BO",
        ]

        # excluir colunas desnecess√°rias para an√°lise
        df_final = df_final.drop(colunas_para_excluir, axis=1)

        # garante que a coluna ser√° considerada como texto
        df_final["DATAOCORRENCIA"] = df_final["DATAOCORRENCIA"].astype(str)

        # remove espa√ßos vazios da coluna
        df_final["DATAOCORRENCIA"] = df_final["DATAOCORRENCIA"].str.strip()

        # Recorta apenas a primeira parte que contem a data
        df_final["DATAOCORRENCIA"] = df_final["DATAOCORRENCIA"].str.split(" ").str[0]

        # exibe a quantidade de numeros n√£o numericos na coluna
        # count_nan = df_final['HORAOCORRENCIA'].isna().sum()
        # print(f'O numero de valores n√£o numericos na coluna HORAOCORRENCIA √©: {count_nan}')

        # exclui todos os valores vazios da coluna
        df_final = df_final.dropna(subset=["HORAOCORRENCIA"])

        # transforma a coluna em texto
        df_final["HORAOCORRENCIA"] = df_final["HORAOCORRENCIA"].astype(str)

        # remove espa√ßos vazios da coluna
        df_final["HORAOCORRENCIA"] = df_final["HORAOCORRENCIA"].str.strip()

        # concatena a data e a hora da ocorrencia
        df_final["DATA_HORA_OCORRENCIA"] = (
            df_final["DATAOCORRENCIA"] + " " + df_final["HORAOCORRENCIA"]
        )

        # deleta as colunas anteriores desnecess√°rias
        df_final = df_final.drop(["DATAOCORRENCIA", "HORAOCORRENCIA"], axis=1)

        # converte a coluna em formato datetime
        df_final["DATA_HORA_OCORRENCIA"] = pd.to_datetime(
            df_final["DATA_HORA_OCORRENCIA"], dayfirst=True, errors="coerce"
        )

        # verifica a quantida de valores vazios da coluna
        # nan_count = df_final['DATA_HORA_OCORRENCIA'].isna().sum()
        # print(f"Quantidade de linhas com valor NaT: {nan_count}")

        # exclui todos os valores vazios da coluna
        df_final = df_final.dropna(subset=["DATA_HORA_OCORRENCIA"])

        # transforma o formato de data e hora no formato correto
        df_final["DATA_HORA_OCORRENCIA"] = df_final["DATA_HORA_OCORRENCIA"].dt.strftime(
            "%d/%m/%Y %H:%M:%S"
        )
        df_final["DATA_HORA_OCORRENCIA"] = pd.to_datetime(
            df_final["DATA_HORA_OCORRENCIA"], dayfirst=True, errors="coerce"
        )

        # exclui todos os valores vazios da coluna
        df_final = df_final.dropna(subset=["LATITUDE", "LONGITUDE"])

        # exclui todos os valores vazios da coluna
        df_final = df_final.dropna(subset=["MARCA_CELULAR"])

        # exclui todos os valores vazios da coluna
        df_final = df_final.dropna(subset=["BAIRRO"])

        # Padronizar com True e False
        df_final["FLAGRANTE"] = df_final["FLAGRANTE"].replace({"Sim": True, "N√£o": False})

        # lista de colunas a serem transformadas em bool
        colunas = [
            "VITIMAFATAL",
            "SEXO",
            "PLACA_VEICULO",
            "DESCR_COR_VEICULO",
            "DESCR_TIPO_VEICULO",
        ]

        # loop para transformar colunas em True ou False
        for coluna in colunas:
            df_final[coluna] = df_final[coluna].fillna("").astype(bool)

        # Cria uma nova coluna contendo o Pa√≠s
        df_final["PA√çS"] = "BRASIL"

        # Cria uma coluna √∫nica com o endere√ßo completo
        df_final["ENDERECO"] = (
            df_final["LOGRADOURO"].astype(str)
            + " - "
            + df_final["NUMERO"].astype(str)
            + " - "
            + df_final["BAIRRO"].astype(str)
            + " - "
            + df_final["CIDADE"].astype(str)
            + " - "
            + df_final["UF"].astype(str)
            + " - "
            + df_final["PA√çS"].astype(str)
        )

        # deleta as colunas anteriores desnecess√°rias
        df_final = df_final.drop(
            ["LOGRADOURO", "NUMERO", "BAIRRO", "CIDADE", "UF", "PA√çS"], axis=1
        )

        # Demonstra os valores da coluna
        # print(df_final['DELEGACIA_NOME'].value_counts())

        # Cria valores para subistitui√ß√£o na coluna DELEGACIA_NOME
        mapeamento = {
            "DELEGACIA ELETRONICA": "DELEGACIA_VIRTUAL",
            "DELEGACIA ELETRONICA 1": "DELEGACIA_VIRTUAL",
        }

        # Subistitui valores de delegacia eletronica por delegacia virtual
        df_final["DELEGACIA_NOME"] = df_final["DELEGACIA_NOME"].replace(mapeamento)

        # Subistitui valores restantes por delegacia f√≠sica
        df_final.loc[
            df_final["DELEGACIA_NOME"] != "DELEGACIA_VIRTUAL", "DELEGACIA_NOME"
        ] = "DELEGACIA_F√çSICA"

        # Padroniza a coluna de marca_celular
        df_final["MARCA_CELULAR"] = df_final["MARCA_CELULAR"].str.title()

        # Substitui os valores na coluna DESCRICAOLOCAL
        df_final["DESCRICAOLOCAL"] = df_final["DESCRICAOLOCAL"].replace(
            "Via p√∫blica", "Via P√∫blica"
        )

        # Agrupa todos os valores menores que 6 mil
        colunas_agrupar = []
        for marca, quantidade in df_final["MARCA_CELULAR"].value_counts().items():
            if quantidade < 6000:
                colunas_agrupar.append(marca)

        # agrupa todos os valores menores que 6mil em "Outros"
        for marca in colunas_agrupar:
            df_final.loc[df_final["MARCA_CELULAR"] == marca, "MARCA_CELULAR"] = "Outros"


        # fun√ß√£o para definir uma parte do dia para cada faiza de hor√°rio
        def obter_parte_do_dia(data_hora):
            hora = pd.to_datetime(data_hora).hour

            if 6 <= hora <= 11:
                return "Manh√£"
            elif 12 <= hora <= 17:
                return "Tarde"
            elif 18 <= hora <= 23:
                return "Noite"
            else:
                return "Madrugada"


        # cria uma nova coluna com as faixas de horarios definidas
        df_final["PARTE_DO_DIA"] = df_final["DATA_HORA_OCORRENCIA"].apply(obter_parte_do_dia)
        """
        st.code(codigo1, language="python")
        st.write("")

        st.subheader("Carregando os dados tratados em um banco Cloud AWS")
        codigo2 = """
        # Constr√≥i a string de conex√£o com o banco de dados
        db_connection_string = (
            f"postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}"
        )

        # Estabelece a conex√£o com o banco de dados
        engine = create_engine(db_connection_string)

        try:
            # Insere os dados do DataFrame na tabela
            df_final.to_sql(name="roubos", con=engine, if_exists="append", index=False)
            print("Dados inseridos com sucesso!")

        except Exception as e:
            print("Erro ao inserir os dados:", str(e))

        finally:
            # Fecha a conex√£o com o banco de dados
            engine.dispose()
        """
        st.code(codigo2, language="python")
        st.write("")

        st.subheader("Visualiza√ß√£o no banco de dados")
        st.image("imagens/1.jpeg")
        st.write("Atrav√©s dessa base de dados, ser√£o constru√≠dos os mapas da mancha criminal usando Geopandas em Python e um Dashboard no Power BI.")
        st.write("")
        
        st.header("4. An√°lise explorat√≥ria de dados")
        st.write("Nesta etapa, vamos mergulhar nas profundezas do conjunto de dados, em busca de estat√≠sticas gerais, detalhes espec√≠ficos e insights relevantes.")
        st.write("Por que n√£o come√ßar pela mancha criminal? Afinal, ela foi constru√≠da para isso!")
        st.image("imagens/3.png")
        st.write("√â vis√≠vel que quanto mais pr√≥ximo da capital, maior a incid√™ncia de roubos. Isso se d√°, principalmente, pela densidade populacional da Grande S√£o Paulo, que √© a maior de todas as capitais do Brasil, de acordo com o senso do IBGE em 2022.")
        st.write("Ao total, em 2022, foram registrados aproximadamente 190 mil roubos de celular. Para ajudar a visualizar esse preocupante cen√°rio, aqui vai uma tabela com as m√©dias aproximadas.")
        # Criar um dicion√°rio com os resultados
        resultados = {
            'M√©trica': ['Roubos por hora', 'Roubos por dia', 'Roubos por semana', 'Roubos por m√™s'],
            '': [21, 521, 3654, 15833]
        }

        # Criar um DataFrame pandas com os resultados
        df_resultados = pd.DataFrame(resultados)

        # Exibir a tabela
        st.table(df_resultados.set_index('M√©trica'))
        st.write("Aqui temos o total de flagrantes efetuados pela pol√≠cia sobre todos os roubos. Aproximadamente 13 mil flagrantes para um total de 190 mil crimes. Ou seja, a for√ßa tarefa s√≥ conseguiu impedir 7% dos crimes desta natureza em 2022.")
        st.image("imagens/4.png")
        st.write("De acordo com os dados, desde a hora da ocorrencia at√© o inicio do registro na delegacia, leva-se em m√©dia 1h e 15 minutos. Esta √© a atual distribui√ß√£o de registros de BO entre delegacia Virtual ou F√≠sica.")
        st.image("imagens/5.png")
        st.write("De acordo com as informa√ß√µes fornecidas pelas v√≠timas nos BO'S, apenas 22% delas conseguiram dar uma descri√ß√£o precisa do ve√≠culo utilizado pelo assaltante. Essa descri√ß√£o conta com a cor, modelo e placa do ve√≠culo.")
        st.image("imagens/6.png")
        st.write("Adoraria poder fazer algumas an√°lises adicionais como por exemplo, quantos destes crimes tiveram como resultado uma v√≠tima fatal, mas quando isso acontece a ocorrencia √© tabulada como omic√≠dio e n√£o como roubo.")
        st.write("Esse tipo de divergencia √© relativamente comum, aqui vai um outro √≥timo exemplo: Estes s√£o os registros dos locais dos roubos que voc√™ j√° acompanhou no dashboard s√≥ que antes de serem tratados. Perceba que a maioria dos dados est√£o registrados como 'Via P√∫blica', e isso n√£o √© exatamente um erro, afinal um comercio pode estar localizado em uma via p√∫blica, uma rodovia/estrada n√£o deixa de ser uma via p√∫blica, e assim por diante.")
        st.image("imagens/7.png")
        st.write("Com todas as informa√ß√µes relevantes reunidas aqui e no dashboard, podemos finalmente partir para as nossas conclus√µes!")
        st.write("")

        st.header("5. Resultados e considera√ß√µes finais")